<?php

/**
 * @file
 * Contains paragraphs_table.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs_table\Form\ParagraphCloneForm;
use Drupal\paragraphs_table\Form\ParagraphDeleteForm;
use Drupal\paragraphs_table\Form\ParagraphEditForm;

/**
 * Implements hook_help().
 */
function paragraphs_table_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the paragraphs_table module.
    case 'help.page.paragraphs_table':
      $output = '<p>' . t('The Paragraphs Table module is a versatile Drupal extension that shares similarities with the <a href="https://www.drupal.org/project/field_collection_table">Field Collection Table</a> module. It offers robust features for managing and presenting data in a table format, providing an efficient way to structure and display information on your Drupal website') . '</p>';
      $output .= '<p>' . t('With the Paragraphs Table module, you can:') . '</p>';
      $output .= '<ul><li>' . t('<b>Table Mode:</b> Easily create and manage tables in both new and edit modes.') . '</li>';
      $output .= '<li>' . t('<b>Flexible Display:</b> Choose between vertical or horizontal table display in your views.') . '</li>';
      $output .= '<li>' . t('<b>Ajax Support:</b> Handle large tables with Ajax, ensuring optimal performance.') . '</li>';
      $output .= '<li>' . t('<b>Operations:</b> Perform common table operations like modify, delete & duplicate, similar to Field Collection Table.') . '</li>';
      $output .= '<li>' . t('<b>Support <a href="https://www.drupal.org/project/ds">Display Suite</a>:</b> Seamlessly integrate the module with Display Suite to enhance your content layout.') . '</li>';
      $output .= '<li>' . t('<b>Support <a href="https://www.drupal.org/project/field_permissions">Field Permission</a>:</b> Control table access using field permission settings.') . '</li>';
      $output .= '<li>' . t('<b>Support <a href="https://datatables.net/">Datatable</a>:</b> enhanced data manipulation.') . '</li>';
      $output .= '<li>' . t('<b>Support <a href="https://bootstrap-table.com/">Bootstraptable</a>:</b> polished & responsive table design.') . '</li>';
      $output .= '<li>' . t('<b>Support <a href="https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery">Google Chart</a>:</b> Utilize Google Charts for data visualization. Be sure to verify your data using the arrayToDataTable examples') . '</li></ul>';
      $output .= '<h5>' . t('Functionality Note') . '</h5>';
      $output .= '<p>' . t("It's important to note that, some functions may still be a work in progress. We encourage you to propose solutions or contribute to help improve the module's functionality, with the aim of achieving a user experience similar to that of the Field Collection Table module.") . '</p>';
      $output .= '<h5>' . t('Note') . '</h5>';
      $output .= '<ul><li>' . t('Add a new form page for paragraphs in view display mode, which operates smoothly with Ajax.') . '</li>';
      $output .= '<li>' . t('Be aware that edit/duplicate forms in view mode may not work as expected with image fields, and the reasons for this behavior are being investigated') . '</li></ul>';
      $output .= '<p>' . t("For the best results, consider using a <a href='https://www.drupal.org/project/bootstrap5_admin'>Bootstrap 5 admin</a> theme to complement the module's features") . '</p>';
      $output .= '<h4>' . t('Support and Appreciation') . '</h4>';
      $output .= '<p>' . t('If you find the Paragraphs Table module valuable and would like to show your appreciation, consider <a href="https://www.buymeacoffee.com/nbao">buying a cup of coffee â˜•</a> for the developer.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Hide field label.
 */
function _paragraphs_table_hidden_label(&$field_form) {
  if (!empty($field_form['#title_display'])) {
    $field_form['#title_display'] = 'invisible';
  }
  // Remove title field date.
  if (!empty($field_form['#type'])) {
    $invisibleType = ['select', 'managed_file', 'entity_autocomplete'];
    if (in_array($field_form['#type'], $invisibleType)) {
      $field_form['#title_display'] = 'invisible';
    }
    if ($field_form['#type'] == 'datetime') {
      $field_form['#title'] = '';
    }
    if (in_array($field_form['#type'], ['radios', 'checkboxes'])) {
      return TRUE;
    }
  }
  // Remove fieldset field date & time.
  if (!empty($field_form["#theme_wrappers"][0]) && in_array($field_form["#theme_wrappers"][0], ['fieldset'])) {
    array_shift($field_form["#theme_wrappers"]);
  }
  foreach (Element::children($field_form) as $child) {
    _paragraphs_table_hidden_label($field_form[$child]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paragraphs_table_preprocess_field_multiple_value_form(&$variables) {
  $element = $variables['element'];
  if (empty($element['#paragraphsTable'])) {
    return FALSE;
  }
  if (!empty($variables['table'])) {
    // Case number of values unlimited - cardinality = -1.
    if (!empty($element['#paragraphsTable']) && !empty($variables["table"]["#tabledrag"])) {
      if ($element["#paragraphsTable"]["#show_all"]) {
        foreach (range(0, $element["#cardinality"] - 1) as $delta) {
          if (empty($variables["table"]["#rows"][$delta])) {
            $variables["table"]["#rows"][$delta] = $variables["table"]["#rows"][0];
          }
        }
        // We don't need button add more anymore.
        foreach (Element::children($variables["button"]) as $child) {
          if (substr($child, 0, 16) === "add_more_button_") {
            $variables["button"][$child]["#access"] = FALSE;
            break;
          }
        }
        $variables["button"]['#access'] = FALSE;
      }
      if (!$element["#paragraphsTable"]["#table_vertical"]) {
        // Add caption header.
        if (!empty($element["#title"])) {
          $variables["table"]["#caption"] = $variables["element"]["#title"];
        }
        if (!empty($element["#title_display"]) && $element["#title_display"] == 'invisible') {
          unset($variables["table"]["#caption"]);
        }

        $row_weight = end($variables["table"]["#header"]);
        if ($element["#cardinality"] < 2) {
          $element["#paragraphsTable"]["#show_all"] = FALSE;
        }
        elseif (!empty($element["#paragraphsTable"]["#show_all"])) {
          unset($variables["table"]["#tabledrag"]);
        }
        $is_new = isset($variables['table']['#rows']) && count($variables['table']['#rows']) == 0;
        $variables["table"]["#header"] = _paragraphs_table_header($element["#paragraphsTable"]["#fields"], $element["#paragraphsTable"]["#show_all"], $row_weight, $is_new);
        $remove_row = FALSE;
        foreach ($variables["table"]["#rows"] as $delta => $rows) {
          $row = _paragraphs_table_row($element["#paragraphsTable"]["#fields"], $rows['data'], $element["#paragraphsTable"]["#show_all"]);
          if (!empty($row)) {
            $variables["table"]["#rows"][$delta]['data'] = $row;
          }
          else {
            $remove_row = TRUE;
            unset($variables["table"]["#rows"][$delta]);
          }
        }
        if ($remove_row) {
          $variables["table"]["#rows"] = array_merge($variables["table"]["#rows"]);
        }
        if (empty($variables["table"]["#rows"]) || !empty($element["#no_header"])) {
          unset($variables["table"]["#header"]);
          unset($variables["table"]["#caption"]);
        }
        elseif ($element["#paragraphsTable"]["#paste_clipboard"]) {
          $variables['table']['#prefix'] = '<a class="paste-paragraphs-clipboard" data-table="' . $variables["table"]["#attributes"]["id"] . '" href="#' . $variables["table"]["#attributes"]["id"] . '" data-bs-toggle="tooltip" data-bs-title="' . t('Paste from excel') . '"><i class="bi bi-clipboard-check"></i></a>';
          $variables['table']['#attached']['library'][] = 'paragraphs_table/paste-clipboard';
        }
      }
      else {
        // Table vertical.
        foreach ($variables["table"]["#rows"] as $delta => $rows) {
          if (!empty($element["#paragraphsTable"]["#widget_state"]["paragraphs"][$delta]["mode"]) &&
            $element["#paragraphsTable"]["#widget_state"]["paragraphs"][$delta]["mode"] == 'remove') {
            continue;
          }
          if (!empty($rows["data"][1]["data"]["subform"])) {
            $row = _paragraphs_table_vertical($element["#paragraphsTable"]["#fields"], $rows["data"][1]["data"]["subform"], $delta);
            $variables["table"]["#rows"][$delta]["data"][1]["data"] = $row;
            if (empty($element["#paragraphsTable"]["#show_all"]) && !empty($rows["data"][1]["data"]["top"]["actions"])) {
              $actions = $rows["data"][1]["data"]["top"]["actions"];
              if (!empty($actions["actions"]["collapse_button"])) {
                unset($actions["actions"]["collapse_button"]);
              }
              $variables["table"]["#rows"][$delta]["data"][3]["data"] = $actions;
            }
          }
          else {
            unset($variables["table"]["#rows"][$delta]);
          }
        }
        if (empty($element["#paragraphsTable"]["#show_all"])) {
          $variables["table"]["#header"][] = [
            'data' => '',
            'class' => ['action'],
          ];
        }
      }
    }
  }
  elseif (!empty($element["#cardinality"]) && $element["#cardinality"] == 1) {
    // Case single value.
    if (!$element["#paragraphsTable"]["#table_vertical"]) {
      $variables["elements"][0]["subform"] = _paragraphs_table_1_row($element["#paragraphsTable"]["#fields"], $variables["elements"][0]["subform"]);
      $variables["elements"][0]["subform"]["#header"] = _paragraphs_table_header($element["#paragraphsTable"]["#fields"], TRUE);
    }
    else {
      // Table vertical.
      $variables["elements"][0]["subform"] = _paragraphs_table_vertical($element["#paragraphsTable"]["#fields"], $variables["elements"][0]["subform"]);
    }
  }
}

/**
 * Get table header.
 */
function _paragraphs_table_header($fields, $show_all = FALSE, $rowWeightCol = FALSE, $is_new = FALSE) {
  $header = empty($show_all) ? ['data' => ''] : [];
  foreach ($fields as $field_name => $field) {
    $header[] = [
      'data' => $field->getLabel(),
      'class' => [$field_name],
    ];
  }
  if (empty($show_all) && !$is_new) {
    $header[] = ['data' => '', 'class' => ['action']];
    $header[] = $rowWeightCol;
  }
  if ($is_new) {
    $header[0] = $header[1];
  }
  return $header;
}

/**
 * Get table row.
 */
function _paragraphs_table_1_row($fields, $rows_data, $show_all = FALSE) {
  $rows['#type'] = 'table';
  foreach ($fields as $field_name => $field) {
    $field_form = $rows_data[$field_name];
    _paragraphs_table_hidden_label($field_form['widget']);
    $rows[0][$field_name] = $field_form;
  }
  return $rows;
}

/**
 * Generate table row.
 */
function _paragraphs_table_row($fields, $rows_data, $show_all = FALSE) {
  if (empty($show_all)) {
    $row[] = $rows_data[0];
  }
  if (isset($rows_data[1]["data"]["#access"]) &&
    $rows_data[1]["data"]["#access"] === FALSE) {
    return FALSE;
  }
  if (!empty($rows_data[1]["data"]["subform"]) && !empty($rows_data[1]['data']['#paragraph_type'])) {
    $subform = $rows_data[1]["data"]["subform"];
  }
  else {
    return FALSE;
  }
  foreach ($fields as $field_name => $field) {
    if (!empty($subform[$field_name])) {
      $field_form = $subform[$field_name];
      if (!empty($field_form['widget'])) {
        _paragraphs_table_hidden_label($field_form['widget']);
      }
      $row[$field_name] = [
        'data' => $field_form,
        'class' => $field_name,
      ];
      unset($subform[$field_name]);
    }
  }
  if (empty($show_all)) {
    $actions = !empty($rows_data[1]["data"]["top"]["actions"]) ? $rows_data[1]["data"]["top"]["actions"] : '';
    if (!empty($actions["actions"]["collapse_button"])) {
      unset($actions["actions"]["collapse_button"]);
    }
    $row[] = [
      'data' => $actions,
      'class' => ['action'],
    ];
  }
  $row[] = $rows_data[2];
  return $row;
}

/**
 * Make subform table vertical.
 */
function _paragraphs_table_vertical($fields, $rows_data, $delta = 0) {
  $subform = ["#type" => 'table'];
  $row_index = 0;
  foreach ($fields as $field_name => $field) {
    $subform[$row_index]['_name'] = [
      '#markup' => $field->getLabel(),
    ];
    $field_form = $rows_data[$field_name];
    if (!empty($field_form['widget'])) {
      _paragraphs_table_hidden_label($field_form['widget']);
    }
    $subform[$row_index++][$field_name] = $field_form;
  }
  return $subform;
}

/**
 * Implements hook_entity_type_build().
 */
function paragraphs_table_entity_type_build(array &$entity_types) {
  $entity_types['paragraph']->setFormClass('entity_edit', ParagraphEditForm::class);
  $entity_types['paragraph']->setFormClass('entity_clone', ParagraphCloneForm::class);
  $entity_types['paragraph']->setFormClass('entity_delete', ParagraphDeleteForm::class);
}

/**
 * Implements hook_theme().
 */
function paragraphs_table_theme($existing, $type, $theme, $path) {
  $variables = [
    'paragraphs_table_chart' => [
      'variables' => [
        'id_field_name' => 'paragraphs-table-chart',
        'settings' => NULL,
      ],
      'template' => 'paragraphs-table-chart',
    ],
  ];

  return $variables;
}

/**
 * Implements hook_entity_type_alter().
 */
function paragraphs_table_type_alter(array &$entity_types) {
  $entity_types['paragraph']->setLinkTemplate('delete-form', '/paragraphs_item/{paragraph}/delete');
}
